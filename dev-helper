#!/bin/bash

# This file is part of Archivematica.
#
# Copyright 2010-2013 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

# @package Archivematica
# @author Joseph Perry <joseph@artefactual.com>
# @version svn: $Id$

cd `dirname $0`
fn_exists()
{
  type $1 2>/dev/null | grep -q 'is a function'
}

colour () { "$@" 2>&1>&3|sed 's,.*,\x1B[31m&\x1B[0m,'>&2;} 3>&1

function git-pull() {
  part="git pull"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
      echo "Doing ${part} ..."
      echo "Cleaning up..."
      cd localDevSetup/
      colour ./cleanup.sh
      cd ..
      currentBranch=`git status | grep '# On branch ' | awk '{print $4}'`
      colour git pull origin ${currentBranch}

      echo "Integrating into environment..."
      cd localDevSetup/
      colour ./createLocalDevDirectories.sh
      cd ..
  else
          echo "not going to ${part}"
  fi
}

function package-update() {
  part="update/install package requirements"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          colour sudo apt-get update
          #colour sudo ./installDependsFromDebianFile.py ./../src/archivematicaCommon/debian/control
          colour sudo ./installDependsFromDebianFile.py ./../src/dashboard/debian/control
          sudo apt-get install python-pip -y
          sudo pip install django==1.4.3
          cd ..
  else
          echo "Not going to ${part}."
  fi
}

function recreate-db() {
  part="recreate the databases"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          cd localDevSetup/
          sudo stop archivematica-mcp-server
          sudo stop archivematica-mcp-client
          sudo apache2ctl stop
          colour ./recreateDB.sh
          cd ..
          sudo start archivematica-mcp-server
          sudo start archivematica-mcp-client
          sudo apachectl start
  else
          echo "Not going to ${part}."
  fi
}

function restart() {
  part="restart archivematica services"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
          sudo stop archivematica-mcp-server
          sleep 1
          sudo stop archivematica-mcp-client
          sleep 1

          if [ -e "/tmp/archivematicaMCPServerPID" ]
          then
            sudo kill -9 `cat /tmp/archivematicaMCPServerPID`
          fi

          sleep 3
          sudo rm /tmp/archivematicaMCP*
          colour sudo start archivematica-mcp-server
          colour sudo start archivematica-mcp-client
          colour sudo apache2ctl restart
  else
          echo "Not going to ${part}."
  fi
}

function clone-sampledata() {
  part="clone sample data into $HOME"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
    CURRENT_REPO=`git remote -v | head -n 1 | sed "s/\t/ /" | cut -f2 -d" "`
    if [ "$CURRENT_REPO" = "git@git.artefactual.com:archivematica" ]; then
      SAMPLEDATA_REPO="git@git.artefactual.com:archivematica-sampledata.git"
    else
      SAMPLEDATA_REPO="https://github.com/artefactual/archivematica-sampledata.git"
    fi

    DATE=`date +%Y-%m-%d-%M-%S`
    git clone $SAMPLEDATA_REPO ~/archivematica-sampledata-$DATE
    echo "Updating OPF..."
    cd ~/archivematica-sampledata-$DATE
    git submodule init
    git submodule update
  else
          echo "Not going to ${part}."
  fi
}

function install-gui() {
  part="re-create gui-scripts editor file"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          rm /home/$USER/.config/Thunar/uca.xml
          tmp="`pwd`"
          cd src/xubuntuGuiScriptsEditor/share
          colour ./addArchivematicaGUIScripts.sh
          cd "$tmp"
  else
          echo "Not going to ${part}."
  fi
}

function update-qubit() {
  part="update Qubit (trunk) and restart its qubit-sword service"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          sudo chmod -R 777 qubit-git
          cd qubit-git
          git pull
          cd -
          sudo chmod -R 777 qubit-git
          colour sudo stop qubit-sword
          colour sudo start qubit-sword
          echo "Remember to activate sfSwordPlugin and restart Qubit database if necessary!"
  else
          echo "Not going to ${part}."
  fi
}

function example() {
  part="example"
  echo -n "\"Would you like to ${part}?\" (y/N) "
  read a
  if [[ $a == "Y" || $a == "y" ]]; then
          echo "Going to ${part} ..."
  else
          echo "Not going to ${part}"
  fi
}

# Run only one function if given
if [ ! -z ${1} ]; then
  ${1}
  exit
fi

git-pull
package-update
recreate-db
restart
clone-sampledata
install-gui
update-qubit
